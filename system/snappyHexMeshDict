/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;
snap            true;
addLayers       false;

geometry
{
	"pipe02.obj"
	{
		type triSurfaceMesh;
		name pipe;
		scale 0.001;
	}
}

castellatedMeshControls
{
    maxLocalCells 2000000;
    maxGlobalCells 8000000;
    minRefinementCells 0;
    maxLoadUnbalance 0.10;
    nCellsBetweenLevels 3;

    features
    (
    	{
            file "pipe02.eMesh";
            level 0;        // Have level 2 for all cells intersected
        //                      // by feature.
        //    levels ((0.1 2)); // Have level 2 for all cells within
        //                      // 0.1 of feature.
        }
    );

    refinementSurfaces
    {
		pipe
		{
			level (0 0);

			regions
			{
        		walls
        		{
            		level       (0 0);
            		patchInfo
            		{
                		type wall;
                		inGroups (walls);
            		}
        		}
        		bend
        		{
            		level       (0 0);
            		patchInfo
            		{
                		type wall;
                		inGroups (bend);
            		}
        		}
        		inlet
        		{
					level		(0 0);
					patchInfo
            		{
                		type wall;
                		inGroups (inlet);
            		}
				}
				outlet
        		{
					level		(0 0);
					patchInfo
            		{
                		type wall;
                		inGroups (outlet);
					}
				}
            }
		}
    }

    resolveFeatureAngle 30;

    refinementRegions
    {
    }

    locationInMesh (0.0 0.0 0.0);

    allowFreeStandingZoneFaces true;
}

snapControls
{
    nSmoothPatch 2;
    nSmoothInternal $nSmoothPatch;
    tolerance 1.0;
    nSolveIter 100;
    nRelaxIter 5;
    nFeatureSnapIter 3;
    strictRegionSnap true;

    // Feature snapping - copied from template dict generated by foamGetDict snappyHexMeshDict
        // Number of feature edge snapping iterations.
        // Leave out altogether to disable.
        nFeatureSnapIter 10;

        // Detect (geometric only) features by sampling the surface
        // (default=false).
        implicitFeatureSnap false;

        // Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        // Detect features between multiple surfaces
        // (only for explicitFeatureSnap, default = false)
        multiRegionFeatureSnap false;
}

addLayersControls
{
    relativeSizes false;
    layers
    {
		pipe_walls
		{
			nSurfaceLayers 9;
		}
		pipe_bend
		{
			nSurfaceLayers 9;
		}
	}
    thickness 0.003;
    firstLayerThickness 0.0001;
    minThickness 0.001;
    nGrow 0;
    featureAngle -150;
    nRelaxIter 3;
    nSmoothSurfaceNormals 1;
    nSmoothNormals 3;
    nSmoothThickness 10;
    maxFaceThicknessRatio 0.5;
    maxThicknessToMedialRatio 0.3;
    minMedialAxisAngle 90;
    nBufferCellsNoExtrude 0;
    nLayerIter 50;
}

meshQualityControls
{
    maxNonOrtho 65;

    maxBoundarySkewness 20;
    maxInternalSkewness 4;

    maxConcave 60;
    minVol 1e-13;
    minTetQuality -1;
    minArea -1;
    minTwist 0.05;
    minDeterminant 0.001;
    minFaceWeight 0.05;
    minVolRatio 0.01;
    minTriangleTwist -1;
    nSmoothScale 4;
    errorReduction 0.75;
    relaxed
    {
        maxNonOrtho 75;
    }
}

mergeTolerance 1e-6;


// ************************************************************************* //
